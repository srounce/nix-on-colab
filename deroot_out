#!/usr/bin/env node

const {spawn} = require("child_process");
const OS = require("os");
const path = require("path");
const fs = require("fs");

const printErr = (message) => process.stderr.write(`${message}\n`)

const userInfo = OS.userInfo()

if (userInfo.username == "root") {
  printErr(`${process.argv[1]} must not be run as root`)
  process.exit(1)
}

const homeDir = process.env.HOME ?? userInfo.homedir

const processConfigPath = process.argv[2]
const processConfigContent = fs.readFileSync(processConfigPath)

const processConfig = JSON.parse(processConfigContent)

const runArgs = processConfig.args
const runEnv = processConfig.env

const appendEnvPath = (value, envVarName) => (envValue) => {
  if (!value) {
    return envValue
  }

  const envVar = envValue[envVarName]

  if (!envVar) {
    return {
      ...envValue,
      [envVarName]: value
    }
  }

  const segments = envVar.split(":")

  if (segments.includes(value)) {
    return envValue
  }

  const newValue = [...segments, value]
    .join(":")
    .trim()

  return {
    ...envValue,
    [envVarName]: newValue
  }
}

const removeKeys = (keys) => (value) =>
  Object.fromEntries(
    Object.entries(value).filter(([k]) => !keys.includes(k))
  )

const pipe = (...ops) => (value) => ops.reduce((a, op) => op(a), value)

const spawnEnv = pipe(
  appendEnvPath(path.join(homeDir, ".nix-profile/lib"), "LD_LIBRARY_PATH"),
  appendEnvPath(path.join(homeDir, ".nix-profile/lib"), "LIBRARY_PATH"),
  appendEnvPath(path.join(homeDir, ".nix-profile/bin"), "PATH"),
  appendEnvPath(path.join(homeDir, ".nix-profile/share/man"), "MANPATH"),
  appendEnvPath(process.env.__EGL_VENDOR_LIBRARY_DIRS, "__EGL_VENDOR_LIBRARY_DIRS"),
  removeKeys(["LD_PRELOAD"])
)(runEnv)

const subprocess = spawn(runArgs[0], runArgs.slice(1), {
  stdio: [0, 1, 2],
  env: spawnEnv,
  shell: true,
})

subprocess.on("exit", (code) => {
  process.exit(code)
})
